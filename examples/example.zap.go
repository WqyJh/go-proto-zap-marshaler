// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: examples/example.proto

/*
Package examples is a generated protocol buffer package.

It is generated from these files:
	examples/example.proto

It has these top-level messages:
	SimpleMessage
	NumberMessage
	RepeatedNumberMessage
	NestedMessage
	EnumMessage
	Oneof
	OneofMessage
	MapMessage
	WellKnownTypeMessage
*/
package examples

import go_uber_org_zap_zapcore "go.uber.org/zap/zapcore"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/duration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (m *SimpleMessage) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	keyName = "stringValue" // field string_value = 1
	enc.AddString(keyName, m.StringValue)

	keyName = "boolValue" // field bool_value = 2
	enc.AddBool(keyName, m.BoolValue)

	return nil
}

func (m *NumberMessage) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	keyName = "floatValue" // field float_value = 1
	enc.AddFloat32(keyName, m.FloatValue)

	keyName = "doubleValue" // field double_value = 2
	enc.AddFloat64(keyName, m.DoubleValue)

	keyName = "int32Value" // field int32_value = 3
	enc.AddInt32(keyName, m.Int32Value)

	keyName = "int64Value" // field int64_value = 4
	enc.AddInt64(keyName, m.Int64Value)

	keyName = "uint32Value" // field uint32_value = 5
	enc.AddUint32(keyName, m.Uint32Value)

	keyName = "uint64Value" // field uint64_value = 6
	enc.AddUint64(keyName, m.Uint64Value)

	keyName = "sint32Value" // field sint32_value = 7
	enc.AddInt32(keyName, m.Sint32Value)

	keyName = "sint64Value" // field sint64_value = 8
	enc.AddInt64(keyName, m.Sint64Value)

	keyName = "fixed32Value" // field fixed32_value = 9
	enc.AddUint32(keyName, m.Fixed32Value)

	keyName = "fixed64Value" // field fixed64_value = 10
	enc.AddUint64(keyName, m.Fixed64Value)

	keyName = "sfixed32Value" // field sfixed32_value = 11
	enc.AddInt32(keyName, m.Sfixed32Value)

	keyName = "sfixed64Value" // field sfixed64_value = 12
	enc.AddInt64(keyName, m.Sfixed64Value)

	return nil
}

func (m *RepeatedNumberMessage) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	keyName = "floatValues" // field float_values = 1
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.FloatValues {
			_ = rv
			aenc.AppendFloat32(rv)
		}
		return nil
	}))

	keyName = "doubleValues" // field double_values = 2
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.DoubleValues {
			_ = rv
			aenc.AppendFloat64(rv)
		}
		return nil
	}))

	keyName = "int32Values" // field int32_values = 3
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.Int32Values {
			_ = rv
			aenc.AppendInt32(rv)
		}
		return nil
	}))

	keyName = "int64Values" // field int64_values = 4
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.Int64Values {
			_ = rv
			aenc.AppendInt64(rv)
		}
		return nil
	}))

	keyName = "uint32Values" // field uint32_values = 5
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.Uint32Values {
			_ = rv
			aenc.AppendUint32(rv)
		}
		return nil
	}))

	keyName = "uint64Values" // field uint64_values = 6
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.Uint64Values {
			_ = rv
			aenc.AppendUint64(rv)
		}
		return nil
	}))

	keyName = "sint32Values" // field sint32_values = 7
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.Sint32Values {
			_ = rv
			aenc.AppendInt32(rv)
		}
		return nil
	}))

	keyName = "sint64Values" // field sint64_values = 8
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.Sint64Values {
			_ = rv
			aenc.AppendInt64(rv)
		}
		return nil
	}))

	keyName = "fixed32Values" // field fixed32_values = 9
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.Fixed32Values {
			_ = rv
			aenc.AppendUint32(rv)
		}
		return nil
	}))

	keyName = "fixed64Values" // field fixed64_values = 10
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.Fixed64Values {
			_ = rv
			aenc.AppendUint64(rv)
		}
		return nil
	}))

	keyName = "sfixed32Values" // field sfixed32_values = 11
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.Sfixed32Values {
			_ = rv
			aenc.AppendInt32(rv)
		}
		return nil
	}))

	keyName = "sfixed64Values" // field sfixed64_values = 12
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.Sfixed64Values {
			_ = rv
			aenc.AppendInt64(rv)
		}
		return nil
	}))

	return nil
}

func (m *NestedMessage) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	keyName = "nestedValue" // field nested_value = 1
	if m.NestedValue != nil {
		var vv interface{} = m.NestedValue
		if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
			enc.AddObject(keyName, marshaler)
		}
	}

	keyName = "repeatedNestedValues" // field repeated_nested_values = 2
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.RepeatedNestedValues {
			_ = rv
			if rv != nil {
				var vv interface{} = rv
				if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
					aenc.AppendObject(marshaler)
				}
			}
		}
		return nil
	}))

	return nil
}

func (m *NestedMessage_Nested) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	keyName = "int32Value" // field int32_value = 1
	enc.AddInt32(keyName, m.Int32Value)

	keyName = "stringValue" // field string_value = 2
	enc.AddString(keyName, m.StringValue)

	return nil
}

func (m *EnumMessage) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	keyName = "numericEnumValue" // field numeric_enum_value = 1
	enc.AddString(keyName, m.NumericEnumValue.String())

	keyName = "repeatedNumericEnumValues" // field repeated_numeric_enum_values = 2
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.RepeatedNumericEnumValues {
			_ = rv
			aenc.AppendString(rv.String())
		}
		return nil
	}))

	keyName = "aliasedEnumValue" // field aliased_enum_value = 3
	enc.AddString(keyName, m.AliasedEnumValue.String())

	keyName = "nestedEnumValue" // field nested_enum_value = 4
	enc.AddString(keyName, m.NestedEnumValue.String())

	keyName = "repeatedNestedEnumValues" // field repeated_nested_enum_values = 5
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.RepeatedNestedEnumValues {
			_ = rv
			aenc.AppendString(rv.String())
		}
		return nil
	}))

	return nil
}

func (m *Oneof) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	keyName = "int32Value" // field int32_value = 1
	if ov, ok := m.GetOneofValue().(*Oneof_Int32Value); ok {
		_ = ov
		enc.AddInt32(keyName, ov.Int32Value)
	}

	keyName = "stringValue" // field string_value = 2
	if ov, ok := m.GetOneofValue().(*Oneof_StringValue); ok {
		_ = ov
		enc.AddString(keyName, ov.StringValue)
	}

	return nil
}

func (m *OneofMessage) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	keyName = "int32Value" // field int32_value = 1
	if ov, ok := m.GetOneofValue().(*OneofMessage_Int32Value); ok {
		_ = ov
		enc.AddInt32(keyName, ov.Int32Value)
	}

	keyName = "stringValue" // field string_value = 2
	if ov, ok := m.GetOneofValue().(*OneofMessage_StringValue); ok {
		_ = ov
		enc.AddString(keyName, ov.StringValue)
	}

	keyName = "repeatedOneofValues" // field repeated_oneof_values = 3
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.RepeatedOneofValues {
			_ = rv
			if rv != nil {
				var vv interface{} = rv
				if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
					aenc.AppendObject(marshaler)
				}
			}
		}
		return nil
	}))

	return nil
}

func (m *MapMessage) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	keyName = "mappedValue" // field mapped_value = 1
	enc.AddObject(keyName, go_uber_org_zap_zapcore.ObjectMarshalerFunc(func(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
		for mk, mv := range m.MappedValue {
			key := fmt.Sprint(mk)
			_ = key
			enc.AddString(key, mv)
		}
		return nil
	}))

	keyName = "mappedEnumValue" // field mapped_enum_value = 2
	enc.AddObject(keyName, go_uber_org_zap_zapcore.ObjectMarshalerFunc(func(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
		for mk, mv := range m.MappedEnumValue {
			key := mk
			_ = key
			enc.AddString(key, mv.String())
		}
		return nil
	}))

	keyName = "mappedNestedValue" // field mapped_nested_value = 3
	enc.AddObject(keyName, go_uber_org_zap_zapcore.ObjectMarshalerFunc(func(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
		for mk, mv := range m.MappedNestedValue {
			key := mk
			_ = key
			if mv != nil {
				var vv interface{} = mv
				if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
					enc.AddObject(key, marshaler)
				}
			}
		}
		return nil
	}))

	return nil
}

func (m *WellKnownTypeMessage) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	keyName = "duration" // field duration = 1
	if m.Duration != nil {
		var vv interface{} = m.Duration
		if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
			enc.AddObject(keyName, marshaler)
		}
	}

	return nil
}
